<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

	<!-- String and StringBuilder -->
	<Type Name="StringStruct">
		<DisplayString>{(char *)_opaque.text,s}</DisplayString>
		<StringView>(char *)_opaque.text,s</StringView>
		<Expand>
			<ExpandedItem>_opaque</ExpandedItem>
		</Expand>
	</Type>
	<Type Name="StringInt">
		<DisplayString>{(char *)text,s}</DisplayString>
		<StringView>(char *)text,s</StringView>
	</Type>
	<Type Name="StringBuilderStruct">
		<DisplayString>{(char *)_opaque.text,s}</DisplayString>
		<StringView>(char *)_opaque.text,s</StringView>
		<Expand>
			<ExpandedItem>_opaque</ExpandedItem>
		</Expand>
	</Type>
	<Type Name="StringBuilderInt">
		<DisplayString>{(char *)text,s}</DisplayString>
		<StringView>(char *)text,s</StringView>
	</Type>

	<!-- Int32Dict -->
	<Type Name="Int32DictNode">
		<DisplayString Condition="key != 0 || value != 0 &amp;&amp; next &gt;= 0">key {key} --&gt; value {value}, next={next}</DisplayString>
		<DisplayString Condition="key == 0 &amp;&amp; value == 0 &amp;&amp; next &gt;= 0">next={next}</DisplayString>
		<DisplayString Condition="key != 0 || value != 0 &amp;&amp; next &lt; 0">key {key} --&gt; value {value}</DisplayString>
		<DisplayString Condition="key == 0 &amp;&amp; value == 0 &amp;&amp; next &lt; 0">null</DisplayString>
	</Type>
	<Type Name="Int32DictKeyValuePairStruct">
		<DisplayString>key {key} --&gt; value {value}</DisplayString>
	</Type>
	<Type Name="Int32DictStruct">
		<DisplayString>Int32Dict: {_opaque.count} nodes</DisplayString>
		<Expand>
			<ExpandedItem>_opaque</ExpandedItem>
		</Expand>
	</Type>
	<Type Name="Int32DictInt">
		<DisplayString>Int32Dict: {count} nodes</DisplayString>
		<Expand>
			<Item Name="[count]">count</Item>
			<Item Name="[max nodes]">mask + 1</Item>
			<Item Name="[first free]">firstFree</Item>
			<Synthetic Name="[buckets]">
				<Expand>
					<Item Name="[address]">buckets</Item>
					<IndexListItems>
						<Size>mask + 1</Size>
						<ValueNode>*(buckets[$i] >= 0 ? heap+buckets[$i] : 0)</ValueNode>
					</IndexListItems>
				</Expand>
			</Synthetic>
			<Synthetic Name="[raw buckets]">
				<Expand>
					<Item Name="[address]">buckets</Item>
					<IndexListItems>
						<Size>mask + 1</Size>
						<ValueNode>buckets[$i]</ValueNode>
					</IndexListItems>
				</Expand>
			</Synthetic>
			<Synthetic Name="[heap]">
				<Expand>
					<Item Name="[address]">heap</Item>
					<IndexListItems>
						<Size>mask + 1</Size>
						<ValueNode>heap[$i]</ValueNode>
					</IndexListItems>
				</Expand>
			</Synthetic>
		</Expand>
	</Type>

	<!-- StringDict -->
	<Type Name="StringDictNode">
		<DisplayString Condition="key != 0 || value != 0 &amp;&amp; next &gt;= 0">key {key} --&gt; value {value}, next={next}</DisplayString>
		<DisplayString Condition="key == 0 &amp;&amp; value == 0 &amp;&amp; next &gt;= 0">next={next}</DisplayString>
		<DisplayString Condition="key != 0 || value != 0 &amp;&amp; next &lt; 0">key {key} --&gt; value {value}</DisplayString>
		<DisplayString Condition="key == 0 &amp;&amp; value == 0 &amp;&amp; next &lt; 0">null</DisplayString>
	</Type>
	<Type Name="StringDictKeyValuePairStruct">
		<DisplayString>key {key} --&gt; value {value}</DisplayString>
	</Type>
	<Type Name="StringDictStruct">
		<DisplayString>StringDict: {_opaque.count} nodes</DisplayString>
		<Expand>
			<ExpandedItem>_opaque</ExpandedItem>
		</Expand>
	</Type>
	<Type Name="StringDictInt">
		<DisplayString>StringDict: {count} nodes</DisplayString>
		<Expand>
			<Item Name="[count]">count</Item>
			<Item Name="[max nodes]">mask + 1</Item>
			<Item Name="[first free]">firstFree</Item>
			<Synthetic Name="[buckets]">
				<Expand>
					<Item Name="[address]">buckets</Item>
					<IndexListItems>
						<Size>mask + 1</Size>
						<ValueNode>*(buckets[$i] >= 0 ? heap+buckets[$i] : 0)</ValueNode>
					</IndexListItems>
				</Expand>
			</Synthetic>
			<Synthetic Name="[raw buckets]">
				<Expand>
					<Item Name="[address]">buckets</Item>
					<IndexListItems>
						<Size>mask + 1</Size>
						<ValueNode>buckets[$i]</ValueNode>
					</IndexListItems>
				</Expand>
			</Synthetic>
			<Synthetic Name="[heap]">
				<Expand>
					<Item Name="[address]">heap</Item>
					<IndexListItems>
						<Size>mask + 1</Size>
						<ValueNode>heap[$i]</ValueNode>
					</IndexListItems>
				</Expand>
			</Synthetic>
		</Expand>
	</Type>

	<!-- StringIntDict -->
	<Type Name="StringIntDictNode">
		<DisplayString Condition="key != 0 || value != 0 &amp;&amp; next &gt;= 0">key {key} --&gt; value {value}, next={next}</DisplayString>
		<DisplayString Condition="key == 0 &amp;&amp; value == 0 &amp;&amp; next &gt;= 0">next={next}</DisplayString>
		<DisplayString Condition="key != 0 || value != 0 &amp;&amp; next &lt; 0">key {key} --&gt; value {value}</DisplayString>
		<DisplayString Condition="key == 0 &amp;&amp; value == 0 &amp;&amp; next &lt; 0">null</DisplayString>
	</Type>
	<Type Name="StringIntDictKeyValuePairStruct">
		<DisplayString>key {key} --&gt; value {value}</DisplayString>
	</Type>
	<Type Name="StringIntDictStruct">
		<DisplayString>StringIntDict: {_opaque.count} nodes</DisplayString>
		<Expand>
			<ExpandedItem>_opaque</ExpandedItem>
		</Expand>
	</Type>
	<Type Name="StringIntDictInt">
		<DisplayString>StringIntDict: {count} nodes</DisplayString>
		<Expand>
			<Item Name="[count]">count</Item>
			<Item Name="[max nodes]">mask + 1</Item>
			<Item Name="[first free]">firstFree</Item>
			<Synthetic Name="[buckets]">
				<Expand>
					<Item Name="[address]">buckets</Item>
					<IndexListItems>
						<Size>mask + 1</Size>
						<ValueNode>*(buckets[$i] >= 0 ? heap+buckets[$i] : 0)</ValueNode>
					</IndexListItems>
				</Expand>
			</Synthetic>
			<Synthetic Name="[raw buckets]">
				<Expand>
					<Item Name="[address]">buckets</Item>
					<IndexListItems>
						<Size>mask + 1</Size>
						<ValueNode>buckets[$i]</ValueNode>
					</IndexListItems>
				</Expand>
			</Synthetic>
			<Synthetic Name="[heap]">
				<Expand>
					<Item Name="[address]">heap</Item>
					<IndexListItems>
						<Size>mask + 1</Size>
						<ValueNode>heap[$i]</ValueNode>
					</IndexListItems>
				</Expand>
			</Synthetic>
		</Expand>
	</Type>

	<!-- SymbolTable -->
	<Type Name="SymbolTableStruct">
		<DisplayString>SymbolTable: {_opaque.count} entries</DisplayString>
		<Expand>
			<ExpandedItem>_opaque</ExpandedItem>
		</Expand>
	</Type>
	<Type Name="SymbolTableInt">
		<DisplayString>SymbolTable: {count} entries</DisplayString>
		<Expand>
			<Item Name="[count]">count</Item>
			<Item Name="[max]">max</Item>
			<Item Name="[lookup]">symbolLookup</Item>
			<IndexListItems>
				<Size>count</Size>
				<ValueNode>symbolNames[$i]</ValueNode>
			</IndexListItems>
		</Expand>
	</Type>

	<!-- SmileObject -->
	<Type Name="SmileObjectInt">

		<DisplayString Condition="(kind &amp; 0xFF) == 0">Object (Null)</DisplayString>
		<DisplayString Condition="(kind &amp; 0xFF) == 1">Object (List) ({((struct SmileListInt *)this)-&gt;a-&gt;kind &amp; 0xFF},{((struct SmileListInt *)this)-&gt;d-&gt;kind &amp; 0xFF})</DisplayString>
		<DisplayString Condition="(kind &amp; 0xFF) == 2">Object (Bool)</DisplayString>
		<DisplayString Condition="(kind &amp; 0xFF) == 3">Object (Symbol) ({((struct SmileSymbolInt *)this)-&gt;symbol})</DisplayString>
		<DisplayString Condition="(kind &amp; 0xFF) == 4">Object (Char)</DisplayString>
		<DisplayString Condition="(kind &amp; 0xFF) == 5">Object (UChar)</DisplayString>
		<DisplayString Condition="(kind &amp; 0xFF) == 6">Object (String) (text={((struct SmileStringInt *)this)->string.text,s})</DisplayString>
		<DisplayString Condition="(kind &amp; 0xFF) == 7">Object (Root)</DisplayString>
		<DisplayString Condition="(kind &amp; 0xFF) == 8">Object (UserObject)</DisplayString>
		<DisplayString Condition="(kind &amp; 0xFF) == 9">Object (Pair)</DisplayString>
		<DisplayString Condition="(kind &amp; 0xFF) == 0x11">Object (Integer32) (value={((struct SmileInteger32Int *)this)->value})</DisplayString>
		<DisplayString Condition="(kind &amp; 0xFF) == 0x12">Object (Integer64) (value={((struct SmileInteger64Int *)this)->value})</DisplayString>
		<DisplayString Condition="(kind &amp; 0xFF) == 0xFF">Object (ParseMessage) (value={((struct ParseMessageStruct *)this)->message->_opaque.text,s})</DisplayString>
		<DisplayString>Object (kind={(char)kind &amp; 0xFF,X})</DisplayString>

		<Expand>
			<Item Name="as List" Condition="(kind &amp; 0xFF) == 0 || (kind &amp; 0xFF) == 1">(struct SmileListInt *)this</Item>
			<Item Name="as Symbol" Condition="(kind &amp; 0xFF) == 3">(struct SmileSymbolInt *)this</Item>
			<Item Name="as String" Condition="(kind &amp; 0xFF) == 6">(struct SmileStringInt *)this</Item>
			<Item Name="as Pair" Condition="(kind &amp; 0xFF) == 9">(struct SmilePairInt *)this</Item>
			<Item Name="as Integer32" Condition="(kind &amp; 0xFF) == 0x11">(struct SmileInteger32Int *)this</Item>
			<Item Name="as Integer64" Condition="(kind &amp; 0xFF) == 0x12">(struct SmileInteger64Int *)this</Item>
			<Item Name="as ParseMessage" Condition="(kind &amp; 0xFF) == 0xFF">(struct ParseMessageStruct *)this</Item>

			<Item Name="[kind]">kind &amp; 0xFF</Item>
			<Item Name="[flags]">kind &amp; ~0xFF</Item>
			<Item Name="[assignedSymbol]">assignedSymbol</Item>
			<Item Name="[vtable]">vtable</Item>
			<Item Name="[base]">base</Item>
		</Expand>
	</Type>

	<!-- SmileString -->
	<Type Name="SmileStringInt">
		<DisplayString>String: {string->text,s}</DisplayString>
	</Type>

	<!-- SmileSymbol -->
	<Type Name="SmileSymbolInt">
		<DisplayString>Symbol: {symbol}</DisplayString>
	</Type>

	<!-- SmileInteger32 -->
	<Type Name="SmileInteger32Int">
		<DisplayString>Integer32: {value}</DisplayString>
	</Type>

	<!-- SmileInteger64 -->
	<Type Name="SmileInteger64Int">
		<DisplayString>Integer64: {value}</DisplayString>
	</Type>

	<!-- ParseMessage -->
	<Type Name="ParseMessageStruct">
		<DisplayString Condition="kind == 0">Info: line {position-&gt;line}: {message->_opaque.text,s}</DisplayString>
		<DisplayString Condition="kind == 1">Warning: line {position-&gt;line}: {message->_opaque.text,s}</DisplayString>
		<DisplayString Condition="kind == 2">Error: line {position-&gt;line}: {message->_opaque.text,s}</DisplayString>
		<DisplayString Condition="kind == 3">Fatal: line {position-&gt;line}: {message->_opaque.text,s}</DisplayString>
		<DisplayString>ParseMessage: line {position-&gt;line}: {message->_opaque.text,s}</DisplayString>
	</Type>

	<!-- LexerPosition -->
	<Type Name="LexerPositionStruct">
		<DisplayString>LexerPosition: {filename->_opaque.text, s}: line {line}, column {column}; lineStart={lineStart}, length={length} </DisplayString>
	</Type>

	<!-- SmileList -->
	<Type Name="SmileListInt">
		<DisplayString Condition="(kind &amp; 0xFF) == 1">List ({((struct SmileListInt *)this)-&gt;a-&gt;kind &amp; 0xFF},{((struct SmileListInt *)this)-&gt;d-&gt;kind &amp; 0xFF})</DisplayString>
		<DisplayString Condition="(kind &amp; 0xFF) == 0">Null</DisplayString>
		<DisplayString>List (kind={(char)kind &amp; 0xFF,02X})</DisplayString>
		<Expand>
			<Item Name="[a]" Condition="(a-&gt;kind &amp; 0xFF) &gt; 1 &amp;&amp; (a-&gt;kind &amp; 0xFF) != 9">a</Item>
			<Item Name="[d]" Condition="(d-&gt;kind &amp; 0xFF) &gt; 1 &amp;&amp; (d-&gt;kind &amp; 0xFF) != 9">d</Item>
			<Item Name="[a]" Condition="(a-&gt;kind &amp; 0xFF) == 9">(struct SmilePairInt *)a</Item>
			<Item Name="[d]" Condition="(d-&gt;kind &amp; 0xFF) == 9">(struct SmilePairInt *)d</Item>
			<Item Name="[a]" Condition="(a-&gt;kind &amp; 0xFF) &lt;= 1">(struct SmileListInt *)a</Item>
			<Item Name="[d]" Condition="(d-&gt;kind &amp; 0xFF) &lt;= 1">(struct SmileListInt *)d</Item>

			<Item Name="[flags]">kind &amp; ~0xFF</Item>
			<Item Name="[assignedSymbol]">assignedSymbol</Item>
			<Item Name="[vtable]">vtable</Item>
			<Item Name="[base]">base</Item>

			<LinkedListItems>
				<HeadPointer>this</HeadPointer>
				<NextPointer>(d-&gt;kind &amp; 0xFF) == 1 ? (struct SmileListInt *)d : 0</NextPointer>
				<ValueNode>a</ValueNode>
			</LinkedListItems>
		</Expand>
	</Type>

	<!-- SmilePair -->
	<Type Name="SmilePairInt">
		<DisplayString>Pair ({left-&gt;kind},{right-&gt;kind})</DisplayString>
		<Expand>
			<Item Name="[left]" Condition="(left-&gt;kind &amp; 0xFF) &gt; 1 &amp;&amp; (left-&gt;kind &amp; 0xFF) != 9">left</Item>
			<Item Name="[right]" Condition="(right-&gt;kind &amp; 0xFF) &gt; 1 &amp;&amp; (right-&gt;kind &amp; 0xFF) != 9">right</Item>
			<Item Name="[left]" Condition="(left-&gt;kind &amp; 0xFF) == 9">(struct SmilePairInt *)left</Item>
			<Item Name="[right]" Condition="(right-&gt;kind &amp; 0xFF) == 9">(struct SmilePairInt *)right</Item>
			<Item Name="[left]" Condition="(left-&gt;kind &amp; 0xFF) &lt;= 1">(struct SmileListInt *)left</Item>
			<Item Name="[right]" Condition="(right-&gt;kind &amp; 0xFF) &lt;= 1">(struct SmileListInt *)right</Item>

			<Item Name="[flags]">kind &amp; ~0xFF</Item>
			<Item Name="[assignedSymbol]">assignedSymbol</Item>
			<Item Name="[vtable]">vtable</Item>
			<Item Name="[base]">base</Item>
		</Expand>
	</Type>

</AutoVisualizer>

